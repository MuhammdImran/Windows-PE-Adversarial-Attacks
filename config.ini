
[pe_dataset]
#folder contains original malware files
malware_files=./pe_dataset/malware_files/
#folder contains original goodware files
goodware_files = ./pe_dataset/goodware_files/

[predicted_malware]
#folder contains original malware files
malware_files = ./pe_dataset/malware_files/
#folder contains malware files predicted as malware by pre_trained malconv model 
pr_malware = ./predicted_malware/

[ad_sample]
# attack type 1 for full_dos, 2 for extend_dos, 3 for content_shift, 4 for fgsm, 5 for gamma
attack_type = 1
#folder contains original goodware files
goodware_files = ./pe_dataset/goodware_files/
#folder contains malware binary files predicted as malware
pr_malware = ./predicted_malware/
#folder contains adversarial samples generated by full_dos attack
full_dos_f = ./ad_generation/output/full_dos_ad_samples/
#folder contains adversarial sample generated by extend_dos attack
extend_dos_f = ./ad_generation/output/extend_ad_samples/
#folder contains adversarial samples generated by content_shift attack
c_shift_f = ./ad_generation/output/c_shift_ad_samples/
#folder contains sample generated by fgsm(padding_slack) attack
fgsm_f = ./ad_generation/output/fgsm_ad_samples/
#folder contains adversarial samples generated by gamma attack
gamma_f = ./ad_generation/output/gamma_ad_samples/
#paramters used in all five attacks
c_shift_extension= 1048
fgsm_padding_bytes = 2048
epsilon_value = 1.0
threshold= 0.5
all_dos= 1
header_extension=500
gamma_sections = 10
population_size = 10
gamma_p_regularizer = 1e-6
gamma_iterations = 10

[evaluation]
# To evaulate the performance of pre-trained malconv on original and modifed dataset. In modified dataset generated adversarial files replace with corresponding original malware files.
# Evaluation_type 1 for orginal dataset, 2 for modifed_full-dos, 3 for modifed_extend-dos, 4 for modified content-shift, 5 for modifed_fgsm, 6 for modified_gamma
evaluation_type = 1
# folder contains origional malware files
malware_files=./pe_dataset/malware_files/
# folder contains origional goodware files
goodware_files = ./pe_dataset/goodware_files/
# empty folder in the begining. this will contain modified malware files w.r.t each evaluation type 
modified_malware = ./models_eval/input/modified_malware/
#adversarial samples generated by full_dos attack  
full_dos = ./ad_generation/output/full_dos_ad_samples/ 
#adversarial samples generated by etend_dos attack
extend_dos = ./ad_generation/output/extend_ad_samples/
#adversarial samples generated by content_shift attack 
content_shift = ./ad_generation/output/c_shift_ad_samples/
#adversarial samples generated by fgsm(padding+slack) attack
fgsm = ./ad_generation/output/fgsm_ad_samples/
#adversarial samples generated by gamma attack
gamma = ./ad_generation/output/gamma_ad_samples/
#folder to save confusion matric of malconv and lightgbm
mal_output = ./models_eval/output/malconv/
lig_output = ./models_eval/output/lightgbm/
#load pre-trained lightgbm model
lgb_model = ./models_eval/input/lightgbm_model.pkl

[corresponding_malware]
#For generated adversarial samples of each attack, find the corresponding malware binary files from predicted malware binary files.
#corr_type 1 for full_dos, 2 for extend_dos, 3 for content_shift, 4 for fgsm(padding_slack), 5 for gamma
corr_type = 1
#adversarial samples generated by full_dos attack
f_dos = ./ad_generation/output/full_dos_ad_samples/ 
#adversarial samples generated by etend_dos attack
ex = ./ad_generation/output/extend_ad_samples/
#adversarial samples generated by content_shift attack 
c_shift = ./ad_generation/output/c_shift_ad_samples/
#adversarial samples generated by fgsm(padding_slack) attack
fgsm = ./ad_generation/output/fgsm_ad_samples/
#adversarial samples generated by gamma attack
gamma = ./ad_generation/output/gamma_ad_samples/
#folder contains malware binary files predicted as malware
p_malware = ./predicted_malware/
#corresponding binary files of adversarial full_dos 
c_f_dos = ./corresponding_malware/c_full_dos/
#corresponding binary files of adversarial extend_dos
c_extend = ./corresponding_malware/c_extend_dos/ 
#corresponding bainry files of adversarial content_shift
c_cont = ./corresponding_malware/c_content_shift/ 
#corresponding binary files of adversarial fgsm(padding+slack)
c_fgs = ./corresponding_malware/c_fgsm/ 
#corresponding binary files of adversarial gamma
c_gam = ./corresponding_malware/c_gamma/

[gamma_subset_samples]
#To find the 1266 gamma adversarial samples that successfully evaded the lightgbm 
##adversarial samples generated by gamma attack
gamma = ./ad_generation/output/gamma_ad_samples/
#corresponding binary files of adversarial gamma
c_gam = ./corresponding_malware/c_gamma/
#pre_trained lightgbm model
lgb_model = ./models_eval/input/lightgbm_model.pkl
#folder to save gamma adversarial samples evaded lighgbm
gamma_subset_ad = ./gamma_subset/gamma_subset_ad/
#folder to save corresponding binary file of gamma evaded binary files
gamma_subset_cor = ./gamma_subset/gamma_subset_cor/

[feature_extraction]
#To extract features from adversarial samples generated by full_dos, extend_dos, content_shift, fgsm, gamma and corresponding malware files w.r.t. each of these attack.
#adversarial samples generated by full_dos attack  
full_dos = ./ad_generation/output/full_dos_ad_samples/ 
#adversarial samples generated by etend_dos attack
extend_dos = ./ad_generation/output/extend_ad_samples/
#adversarial samples generated by content_shift attack 
content_shift = ./ad_generation/output/c_shift_ad_samples/
#adversarial samples generated by fgsm attack
fgsm = ./ad_generation/output/fgsm_ad_samples/
#adversarial samples generated by gamma attack
gamma = ./ad_generation/output/gamma_ad_samples/
#1266 gamma adversarial samples evaded lightgbm 
gamma_subset_ad = ./gamma_subset/gamma_subset_ad/
#corresponding binary files of adversarial full_dos 
c_full_dos = ./corresponding_malware/c_full_dos/ 
#corresponding binary files of adversarial extend_dos
c_extend_dos = ./corresponding_malware/c_extend_dos/ 
#corresponding bainry files of adversarial content_shift
c_content_shift = ./corresponding_malware/c_content_shift/ 
#corresponding binary files of adversarial fgsm(padding+slack)
c_fgsm = ./corresponding_malware/c_fgsm/ 
#corresponding binary files of adversarial gamma
c_gamma = ./corresponding_malware/c_gamma/
#corresponding binary files of 1266  adversarial gamma binary files evaded lightgbm
c_gamma_subset = ./gamma_subset/gamma_subset_cor/
#folder to save extracted features of bianry files
f_output = ./corresponding_malware/output/

[eu_distance]
#To compute the euclidean distance between raw byte_based space and  engineered featured_based. 
#folder to save computed euclidean distance 
output = ./euclidean_distances/
#adversarial samples generated by full_dos attack  
full_dos = ./ad_generation/output/full_dos_ad_samples/ 
#adversarial samples generated by etend_dos attack
extend_dos = ./ad_generation/output/extend_ad_samples/
#adversarial samples generated by content_shift attack 
content_shift = ./ad_generation/output/c_shift_ad_samples/
#adversarial samples generated by fgsm attack
fgsm = ./ad_generation/output/fgsm_ad_samples/
#corresponding binary files of adversarial full_dos 
c_full_dos = ./corresponding_malware/c_full_dos/ 
#corresponding binary files of adversarial extend_dos
c_extend_dos = ./corresponding_malware/c_extend_dos/ 
#corresponding bainry files of adversarial content_shift
c_content_shift = ./corresponding_malware/c_content_shift/ 
#corresponding binary files of adversarial fgsm(padding+slack)
c_fgsm = ./corresponding_malware/c_fgsm/ 
#features extracted from full_dos adversarial bianry files
full_dos_f = ./corresponding_malware/output/full_dos_ad_samples.csv
#features extracted from extend_dos aversarial binary files
extend_dos_f = ./corresponding_malware/output/extend_ad_samples.csv
#features extracted from content_shift adversarial binary files
content_shift_f = ./corresponding_malware/output/c_shift_ad_samples.csv
#features extracted from fgsm(padding+slack) adversarial binary files
fgsm_f = ./corresponding_malware/output/fgsm_ad_samples.csv
#features exytracted from corresponding full_dos adversarial binary files
c_full_dos_f = ./corresponding_malware/output/c_full_dos.csv
#features exytracted from corresponding extend_dos adversarial binary files
c_extend_dos_f = ./corresponding_malware/output/c_extend_dos.csv
#features exytracted from corresponding content_shift adversarial binary files
c_content_shift_f = ./corresponding_malware/output/c_content_shift.csv
#features exytracted from corresponding fgsm(padding+slack) adversarial binary files
c_fgsm_f = ./corresponding_malware/output/c_fgsm.csv

[gamma_subset_euclidean_distance]
#To compute the gamma and gamma_subset(samples evaded lightgbm) euclidean distance between raw byte_based space and  engineered featured_based space.
#folder to save gamma and subset_gamma euclidean distance
output = ./gamma_subset_eu_distance/
#adversarial samples generated by gamma attack
gamma = ./ad_generation/output/gamma_ad_samples/
#1266 gamma adversarial samples evaded lightgbm  
gamma_subset_ad = ./gamma_subset/gamma_subset_ad/
#corresponding binary files of adversarial gamma
c_gamma = ./corresponding_malware/c_gamma/
#corresponding binary files of 1266  adversarial gamma binary files evaded lightgbm
c_gamma_subset = ./gamma_subset/gamma_subset_cor/
#features exytracted from gamma adversarial binary files
gamma_ad_csv = ./corresponding_malware/output/gamma_ad_samples.csv
#features exytracted from gamma_subset (1266) adversarial binary files
gamma_subset_ad_csv = ./corresponding_malware/output/gamma_subset_ad.csv
#features exytracted from corresponding gamma adversarial binary files
c_gamma_csv = ./corresponding_malware/output/c_gamma.csv
#features exytracted from corresponding gamma_subset adversarial binary files
c_gamma_subset_csv = ./corresponding_malware/output/gamma_subset_cor.csv


[XAI_beeswarm]
#To compute SHAP between generated adversarial binary files and corresponding malware files in engineered feature_based space of full_dos, extend_dos, content, fgsm and gamma attack
#folder to save beeswarm plots
output = ./XAI_beeswarm/
#features extracted from full_dos adversarial bianry files
full_dos_f = ./corresponding_malware/output/full_dos_ad_samples.csv
#features extracted from extend_dos adversarial bianry files
extend_dos_f = ./corresponding_malware/output/extend_ad_samples.csv
#features extracted from content_shift adversarial bianry files
content_shift_f = ./corresponding_malware/output/c_shift_ad_samples.csv
#features extracted from fgsm(padding_slack) adversarial bianry files
fgsm_f = ./corresponding_malware/output/fgsm_ad_samples.csv
#features extracted from gamma adversarial bianry files
gamma_f = ./corresponding_malware/output/gamma_ad_samples.csv
#features exytracted from corresponding full_dos adversarial binary files
c_full_dos_f = ./corresponding_malware/output/c_full_dos.csv
#features exytracted from corresponding extend_dos adversarial binary files
c_extend_dos_f = ./corresponding_malware/output/c_extend_dos.csv
#features exytracted from corresponding content_shift adversarial binary files
c_content_shift_f = ./corresponding_malware/output/c_content_shift.csv
#features exytracted from corresponding fgsm(padding+slack) adversarial binary files
c_fgsm_f = ./corresponding_malware/output/c_fgsm.csv
#features exytracted from corresponding gamma adversarial binary files
c_gamma_f = ./corresponding_malware/output/c_gamma.csv
#pre_trained lgbm model
lgb_model = ./models_eval/input/lightgbm_model.pkl

[adv_training]
#Adversarial training uisng 3-fold CV on original and extended dataset.
#At_type 1 for full_dos, 2 for extend_dos, 3 for content_shift, 4 for fgsm, 5 for gamma
At_type = 1
#empty in begining, to merge original malware and goodware binary files
original_samples = ./AT/input/original_samples/
#original malware files
malware_files = ./pe_dataset/malware_files/
#original goodware files
goodware_files = ./pe_dataset/goodware_files/
#adversarial samples generated by full_dos attack
full_dos = ./ad_generation/output/full_dos_ad_samples/
#adversarial samples generated by etend_dos attack
extend_dos = ./ad_generation/output/extend_ad_samples/
#adversarial samples generated by content_shift attack
content_shift = ./ad_generation/output/c_shift_ad_samples/
#adversarial samples generated by fgsm(padding+slack) attack
fgsm = ./ad_generation/output/fgsm_ad_samples/
#adversarial samples generated by gamma attack
gamma = ./ad_generation/output/gamma_ad_samples/
#base directory to save adversarial training results
output = ./AT/output/
#subdirectory and subfolder to save full_dos adversarial training result 
fdos_output = ./AT/output/fdos_output/
fdos_models = ./AT/output/fdos_output/models/
fdos_results =./AT/output/fdos_output/results/
#subdirectory and subfolder to save extend_dos adversarial training result 
extend_output = ./AT/output/extend_output/
extend_models = ./AT/output/extend_output/models/
extend_results =./AT/output/extend_output/results/
#subdirectory and subfolder to save content_shift adversarial training result 
content_output = ./AT/output/content_output/
content_models = ./AT/output/content_output/models/
content_results =./AT/output/content_output/results/
#subdirectory and subfolder to save fgsm(padding+slack) adversarial training result 
fgs_output = ./AT/output/fgs_output/
fgs_models = ./AT/output/fgs_output/models/
fgs_results =./AT/output/fgs_output/results/
#subdirectory and subfolder to save gamma adversarial training result 
gamma_output = ./AT/output/gamma_output/
gamma_models = ./AT/output/gamma_output/models/
gamma_results =./AT/output/gamma_output/results/

[XAI_CV]
#To compute SHAP for the gamma samples classified as benign by the models trained on original dataset folds and classified as malware by the models trained on extended_dataset folds. 
#base directory
output = ./AT/output/gamma_output/
#folder to save plot
output_folder = ./AT/output/gamma_output/sub_output/
#csv file contains fold1 binary files names
fold1_data = ./AT/output/gamma_output/adv_fold1/fold1_data.csv
#csv file contains fold2 binary files names
fold2_data = ./AT/output/gamma_output/adv_fold2/fold2_data.csv
#csv file contains fold3 binary files names
fold3_data = ./AT/output/gamma_output/adv_fold3/fold3_data.csv
#pre_trained models trained on original dataset folds and extended dataset folds
models = ./AT/output/gamma_output/models/
#pre_trained model trained on original fold2 and fold3
O_M_f2f3 = ./AT/output/gamma_output/models/trial_3_train_fold2_updated+fold3_updated_model.pkl
#pre_trained model trained on extended fold2 and fold3
AT_M_f2f3 = ./AT/output/gamma_output/models/trial_9_train_AT_fold2_updated+AT_fold3_updated_model.pkl
#pre_trained model trained on original fold1 and fold3
O_M_f1f3 = ./AT/output/gamma_output/models/trial_2_train_fold1_updated+fold3_updated_model.pkl
#pre_trained model trained on extended fold1 and fold3
AT_M_f1f3 = ./AT/output/gamma_output/models/trial_8_train_AT_fold1_updated+AT_fold3_updated_model.pkl
#pre_trained model trained on original fold1 and fold2
O_M_f1f2 = ./AT/output/gamma_output/models/trial_1_train_fold1_updated+fold2_updated_model.pkl
#pre_trained model trained on extended fold1 and fold2
AT_M_f1f2 = ./AT/output/gamma_output/models/trial_7_train_AT_fold1_updated+AT_fold2_updated_model.pkl
